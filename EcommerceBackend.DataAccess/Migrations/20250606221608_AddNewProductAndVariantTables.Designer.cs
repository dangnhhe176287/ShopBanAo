// <auto-generated />
using System;
using EcommerceBackend.DataAccess.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EcommerceBackend.DataAccess.Migrations
{
    [DbContext(typeof(EcommerceDBContext))]
    [Migration("20250606221608_AddNewProductAndVariantTables")]
    partial class AddNewProductAndVariantTables
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("EcommerceBackend.DataAccess.Models.Blog", b =>
                {
                    b.Property<int>("BlogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Blog_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BlogId"), 1L, 1);

                    b.Property<int?>("BlogCategoryId")
                        .HasColumnType("int")
                        .HasColumnName("Blog_category_id");

                    b.Property<string>("BlogContent")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Blog_content");

                    b.Property<string>("BlogTittle")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Blog_tittle");

                    b.HasKey("BlogId");

                    b.HasIndex("BlogCategoryId");

                    b.ToTable("Blog", (string)null);
                });

            modelBuilder.Entity("EcommerceBackend.DataAccess.Models.BlogCategory", b =>
                {
                    b.Property<int>("BlogCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Blog_category_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BlogCategoryId"), 1L, 1);

                    b.Property<string>("BlogCategoryTitle")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Blog_category_title");

                    b.Property<bool?>("IsDelete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.HasKey("BlogCategoryId");

                    b.ToTable("Blog_category", (string)null);
                });

            modelBuilder.Entity("EcommerceBackend.DataAccess.Models.Cart", b =>
                {
                    b.Property<int>("CartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Cart_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CartId"), 1L, 1);

                    b.Property<decimal?>("AmountDue")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("Amount_due")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("Customer_id");

                    b.Property<int?>("TotalQuantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Total_quantity")
                        .HasDefaultValueSql("((0))");

                    b.HasKey("CartId");

                    b.HasIndex("CustomerId");

                    b.ToTable("Cart", (string)null);
                });

            modelBuilder.Entity("EcommerceBackend.DataAccess.Models.CartDetail", b =>
                {
                    b.Property<int>("CartDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Cart_detail_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CartDetailId"), 1L, 1);

                    b.Property<int?>("CartId")
                        .HasColumnType("int")
                        .HasColumnName("Cart_id");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("Product_id");

                    b.Property<string>("ProductName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Product_name");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("VariantId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Variant_id");

                    b.HasKey("CartDetailId");

                    b.HasIndex("CartId");

                    b.HasIndex("ProductId");

                    b.ToTable("Cart_detail", (string)null);
                });

            modelBuilder.Entity("EcommerceBackend.DataAccess.Models.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Order_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderId"), 1L, 1);

                    b.Property<decimal?>("AmountDue")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("Amount_due");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("Customer_id");

                    b.Property<string>("OrderNote")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("Order_note");

                    b.Property<int?>("OrderStatusId")
                        .HasColumnType("int")
                        .HasColumnName("Order_status_id");

                    b.Property<int?>("PaymentMethodId")
                        .HasColumnType("int")
                        .HasColumnName("Payment_method_id");

                    b.Property<int?>("TotalQuantity")
                        .HasColumnType("int")
                        .HasColumnName("Total_quantity");

                    b.HasKey("OrderId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("OrderStatusId");

                    b.HasIndex("PaymentMethodId");

                    b.ToTable("Order", (string)null);
                });

            modelBuilder.Entity("EcommerceBackend.DataAccess.Models.OrderDetail", b =>
                {
                    b.Property<int>("OrderDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Order_detail_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderDetailId"), 1L, 1);

                    b.Property<int?>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("Order_id");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("Product_id");

                    b.Property<string>("ProductName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Product_name");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("VariantId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Variant_id");

                    b.HasKey("OrderDetailId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("Order_detail", (string)null);
                });

            modelBuilder.Entity("EcommerceBackend.DataAccess.Models.OrderStatus", b =>
                {
                    b.Property<int>("OrderStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Order_status_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderStatusId"), 1L, 1);

                    b.Property<string>("OrderStatusTittle")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Order_status_tittle");

                    b.HasKey("OrderStatusId");

                    b.ToTable("Order_status", (string)null);
                });

            modelBuilder.Entity("EcommerceBackend.DataAccess.Models.PaymentMethod", b =>
                {
                    b.Property<int>("PaymentMethodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Payment_method_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentMethodId"), 1L, 1);

                    b.Property<string>("PaymentMethodTittle")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Payment_method_tittle");

                    b.HasKey("PaymentMethodId");

                    b.ToTable("Payment_method", (string)null);
                });

            modelBuilder.Entity("EcommerceBackend.DataAccess.Models.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("product_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductId"), 1L, 1);

                    b.Property<string>("AvailableAttributes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("available_attributes");

                    b.Property<decimal>("BasePrice")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("base_price");

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("brand");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<bool>("IsDelete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("is_delete");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("name");

                    b.Property<int?>("ProductCategoryId")
                        .IsRequired()
                        .HasColumnType("int")
                        .HasColumnName("product_category_id");

                    b.Property<int?>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("GETDATE()");

                    b.HasKey("ProductId");

                    b.HasIndex("ProductCategoryId");

                    b.ToTable("products", (string)null);

                    b.HasCheckConstraint("chk_available_attributes", "available_attributes IS NULL OR ISJSON(available_attributes) = 1");
                });

            modelBuilder.Entity("EcommerceBackend.DataAccess.Models.ProductCategory", b =>
                {
                    b.Property<int>("ProductCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Product_category_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductCategoryId"), 1L, 1);

                    b.Property<bool?>("IsDelete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("ProductCategoryTitle")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Product_category_title");

                    b.HasKey("ProductCategoryId");

                    b.ToTable("Product_category", (string)null);
                });

            modelBuilder.Entity("EcommerceBackend.DataAccess.Models.ProductImage", b =>
                {
                    b.Property<int>("ProductImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Product_image_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductImageId"), 1L, 1);

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("Image_url");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("Product_id");

                    b.HasKey("ProductImageId");

                    b.HasIndex("ProductId");

                    b.ToTable("Product_image", (string)null);
                });

            modelBuilder.Entity("EcommerceBackend.DataAccess.Models.ProductVariant", b =>
                {
                    b.Property<int>("VariantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("variant_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VariantId"), 1L, 1);

                    b.Property<string>("Attributes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("attributes");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<decimal>("Price")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("price");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("product_id");

                    b.Property<string>("SKU")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("sku");

                    b.Property<int>("Stock")
                        .HasColumnType("int")
                        .HasColumnName("stock");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("GETDATE()");

                    b.HasKey("VariantId");

                    b.HasIndex("ProductId");

                    b.ToTable("variants", (string)null);

                    b.HasCheckConstraint("chk_attributes", "ISJSON(attributes) = 1");
                });

            modelBuilder.Entity("EcommerceBackend.DataAccess.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("User_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"), 1L, 1);

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("Create_date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("date")
                        .HasColumnName("Date_of_birth");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool?>("IsDelete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("Role_id");

                    b.Property<int?>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("UserName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("User_name");

                    b.HasKey("UserId");

                    b.HasIndex("RoleId");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("EcommerceBackend.DataAccess.Models.UserRole", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Role_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"), 1L, 1);

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Role_name");

                    b.HasKey("RoleId")
                        .HasName("PK__User_rol__D80BB09309FFAC98");

                    b.ToTable("User_role", (string)null);
                });

            modelBuilder.Entity("EcommerceBackend.DataAccess.Models.Blog", b =>
                {
                    b.HasOne("EcommerceBackend.DataAccess.Models.BlogCategory", "BlogCategory")
                        .WithMany("Blogs")
                        .HasForeignKey("BlogCategoryId")
                        .HasConstraintName("FK__Blog__Blog_categ__4F7CD00D");

                    b.Navigation("BlogCategory");
                });

            modelBuilder.Entity("EcommerceBackend.DataAccess.Models.Cart", b =>
                {
                    b.HasOne("EcommerceBackend.DataAccess.Models.User", "Customer")
                        .WithMany("Carts")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("FK__Cart__Customer_i__37A5467C");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("EcommerceBackend.DataAccess.Models.CartDetail", b =>
                {
                    b.HasOne("EcommerceBackend.DataAccess.Models.Cart", "Cart")
                        .WithMany("CartDetails")
                        .HasForeignKey("CartId")
                        .HasConstraintName("FK__Cart_deta__Cart___3C69FB99");

                    b.HasOne("EcommerceBackend.DataAccess.Models.Product", "Product")
                        .WithMany("CartDetails")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK__Cart_deta__Produ__3D5E1FD2");

                    b.Navigation("Cart");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("EcommerceBackend.DataAccess.Models.Order", b =>
                {
                    b.HasOne("EcommerceBackend.DataAccess.Models.User", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("FK__Order__Customer___440B1D61");

                    b.HasOne("EcommerceBackend.DataAccess.Models.OrderStatus", "OrderStatus")
                        .WithMany("Orders")
                        .HasForeignKey("OrderStatusId")
                        .HasConstraintName("FK__Order__Order_sta__45F365D3");

                    b.HasOne("EcommerceBackend.DataAccess.Models.PaymentMethod", "PaymentMethod")
                        .WithMany("Orders")
                        .HasForeignKey("PaymentMethodId")
                        .HasConstraintName("FK__Order__Payment_m__44FF419A");

                    b.Navigation("Customer");

                    b.Navigation("OrderStatus");

                    b.Navigation("PaymentMethod");
                });

            modelBuilder.Entity("EcommerceBackend.DataAccess.Models.OrderDetail", b =>
                {
                    b.HasOne("EcommerceBackend.DataAccess.Models.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .HasConstraintName("FK__Order_det__Order__48CFD27E");

                    b.HasOne("EcommerceBackend.DataAccess.Models.Product", "Product")
                        .WithMany("OrderDetails")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK__Order_det__Produ__49C3F6B7");

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("EcommerceBackend.DataAccess.Models.Product", b =>
                {
                    b.HasOne("EcommerceBackend.DataAccess.Models.ProductCategory", "ProductCategory")
                        .WithMany("Products")
                        .HasForeignKey("ProductCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_product_category");

                    b.Navigation("ProductCategory");
                });

            modelBuilder.Entity("EcommerceBackend.DataAccess.Models.ProductImage", b =>
                {
                    b.HasOne("EcommerceBackend.DataAccess.Models.Product", "Product")
                        .WithMany("ProductImages")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK__Product_i__Produ__34C8D9D1");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("EcommerceBackend.DataAccess.Models.ProductVariant", b =>
                {
                    b.HasOne("EcommerceBackend.DataAccess.Models.Product", "Product")
                        .WithMany("Variants")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_product_id");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("EcommerceBackend.DataAccess.Models.User", b =>
                {
                    b.HasOne("EcommerceBackend.DataAccess.Models.UserRole", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK__User__Role_id__267ABA7A");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("EcommerceBackend.DataAccess.Models.BlogCategory", b =>
                {
                    b.Navigation("Blogs");
                });

            modelBuilder.Entity("EcommerceBackend.DataAccess.Models.Cart", b =>
                {
                    b.Navigation("CartDetails");
                });

            modelBuilder.Entity("EcommerceBackend.DataAccess.Models.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("EcommerceBackend.DataAccess.Models.OrderStatus", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("EcommerceBackend.DataAccess.Models.PaymentMethod", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("EcommerceBackend.DataAccess.Models.Product", b =>
                {
                    b.Navigation("CartDetails");

                    b.Navigation("OrderDetails");

                    b.Navigation("ProductImages");

                    b.Navigation("Variants");
                });

            modelBuilder.Entity("EcommerceBackend.DataAccess.Models.ProductCategory", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("EcommerceBackend.DataAccess.Models.User", b =>
                {
                    b.Navigation("Carts");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("EcommerceBackend.DataAccess.Models.UserRole", b =>
                {
                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
